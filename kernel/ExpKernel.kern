/** @file ExpKernel
 * @brief Implements the separable exponential kernel defined by
 * K(t,s) = exp(sum_i t_i - s_i)
 *
 * Note: Mostly for testing purposes.
 */

#include "fmmtl/Kernel.hpp"

// Use a library-defined Vector class that supports multiple architectures
#include "fmmtl/Vec.hpp"

struct ExpPotential
    : public FMM_Kernel<ExpPotential>
{
  typedef Vec<3,double>  source_type;
  typedef double         charge_type;
  typedef Vec<3,double>  target_type;
  typedef double         result_type;
  typedef double         kernel_value_type;

  /** Kernel evaluation
   * K(t,s) = exp(sum_i t_i - s_i)
   */
  FMMTL_INLINE
  kernel_value_type operator()(const target_type& t,
                               const source_type& s) const {
    return exp(t[0] + t[1] + t[2]
               - s[0] - s[1] - s[2]);
  }
  FMMTL_INLINE
  kernel_value_type transpose(const kernel_value_type& kts) const {
    return 1.0 / kts;
  }
};
FMMTL_KERNEL_EXTRAS(ExpPotential);


struct ExpExpansion
    : public ExpPotential,
      public FMM_Expansion<ExpExpansion>
{
  //! The dimension of the spacial interpretation of the source/target_type.
  static const unsigned dimension = 3;
  //! Point type to use for the tree
  typedef Vec<3,double> point_type;

  //! Multipole expansion type
  typedef double multipole_type;
  //! Local expansion type
  typedef double local_type;

  /** Kernel P2M operation
   * M += Op(s) * c where M is the multipole and s is the source
   *
   * @param[in] source The point source
   * @param[in] charge The source's corresponding charge
   * @param[in] center The center of the box containing the multipole expansion
   * @param[in,out] M The multipole expansion to accumulate into
   */
  void P2M(const source_type& source, const charge_type& charge,
           const point_type& center, multipole_type& M) const {
    M += exp(center[0] + center[1] + center[2]
             - source[0] - source[1] - source[2]) * charge;
  }

  /** Kernel P2L operation
   * L += c * Op(s) where L is the local expansion,
   *                      s is the source,
   *                  and c is the charge.
   *
   * @param[in] source  The source to accumulate into the local expansion
   * @param[in] charge  The source's corresponding charge
   * @param[in] center  The center of the box containing the local expansion
   * @param[in,out] L   The local expansion to accumulate into
   */
  void P2L(const source_type& source, const charge_type& charge,
           const point_type& center, local_type& L) const {
    L += exp(center[0] + center[1] + center[2]
             - source[0] - source[1] - source[2]) * charge;
  }

  /** Kernel M2M operator
   * M_t += Op(M_s) where M_t is the target and M_s is the source
   *
   * @param[in] source The multipole source at the child level
   * @param[in,out] target The multipole target to accumulate into
   * @param[in] translation The vector from source to target
   * @pre source includes the influence of all points within its box
   */
  void M2M(const multipole_type& source,
                 multipole_type& target,
           const point_type& translation) const {
    target += exp(translation[0] + translation[1] + translation[2]) * source;
  }

  /** Kernel M2L operation
   * L += Op(M)
   *
   * @param[in] source The multpole expansion source
   * @param[in,out] target The local expansion target
   * @param[in] translation The vector from source to target
   * @pre translation obeys the multipole-acceptance criteria
   * @pre source includes the influence of all points within its box
   */
  void M2L(const multipole_type& source,
                 local_type& target,
           const point_type& translation) const {
    target += exp(translation[0] + translation[1] + translation[2]) * source;
  }

  /** Kernel M2P operation
   * r += Op(M) where M is the multipole and r is the result
   *
   * @param[in] M The multpole expansion
   * @param[in] center The center of the box with the multipole expansion
   * @param[in] target The target point position
   * @param[in,out] result The target's corresponding result to accumulate into
   * @pre M includes the influence of all points within its box
   */
  void M2P(const multipole_type& M, const point_type& center,
           const target_type& target, result_type& result) const {
    result += exp(target[0] + target[1] + target[2]
                  - center[0] - center[1] - center[2]) * M;
  }

  /** Kernel L2L operator
   * L_t += Op(L_s) where L_t is the target and L_s is the source
   *
   * @param[in] source The local source at the parent level
   * @param[in,out] target The local target to accumulate into
   * @param[in] translation The vector from source to target
   * @pre source includes the influence of all points outside its box
   */
  void L2L(const local_type& source,
                 local_type& target,
           const point_type& translation) const {
    target += exp(translation[0] + translation[1] + translation[2]) * source;
  }

  /** Kernel L2P operation
   * r += Op(L) where L is the local expansion and r is the result
   *
   * @param[in] L The local expansion
   * @param[in] center The center of the box with the local expansion
   * @param[in] t_begin,t_end Iterator pair to the target points
   * @param[in] r_begin Iterator to the result accumulator
   * @pre L includes the influence of all points outside its box
   */
  void L2P(const local_type& L, const point_type& center,
           const target_type& target, result_type& result) const {
    result += exp(target[0] + target[1] + target[2]
                  - center[0] - center[1] - center[2]) * L;
  }
};
